name: Backend Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**.py'
      - 'backend/requirements*.txt'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**.py'
      - 'backend/requirements*.txt'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10"]

    services:
      # Add PostgreSQL service for integration tests
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # This activates GitHub's built-in pip caching
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        # Install dev requirements if available, otherwise regular requirements
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        elif [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        # Install test dependencies
        pip install pytest pytest-cov pytest-xdist pytest-env pytest-mock

    - name: Verify dependencies
      run: |
        pip freeze
        python --version

    - name: Run tests with coverage
      working-directory: ./backend
      env:
        # Set up environment variables for tests
        ENVIRONMENT: test
        PYTHONPATH: ${{ github.workspace }}/backend
        # Database connection for tests
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        # AWS mocking settings
        AWS_DEFAULT_REGION: us-west-2
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
      run: |
        # Run tests with coverage and parallel execution
        python -m pytest \
          --cov=. \
          --cov-report=xml \
          --cov-report=term \
          -v \
          --junitxml=pytest.xml \
          -n auto

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()  # Upload even if tests fail
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: |
          backend/pytest.xml
          backend/.coverage
          backend/coverage.xml

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always()  # Always run even if tests fail
      with:
        report_paths: 'backend/pytest.xml'
        check_name: Test Results - Python ${{ matrix.python-version }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella-${{ matrix.python-version }}
        fail_ci_if_error: false
