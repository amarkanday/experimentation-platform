name: Backend Tests

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
      - 'requirements*.txt'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
      - 'requirements*.txt'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: experimentation_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-xdist pytest-env
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # Install package in development mode
        pip install -e .

    - name: Create schema
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d experimentation_test -c "CREATE SCHEMA IF NOT EXISTS experimentation;"

    - name: Run tests
      env:
        TEST_DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/experimentation_test"
      run: |
        python -m pytest backend/tests/ \
          --cov=backend \
          --cov-report=xml \
          --cov-report=term \
          -v \
          --junitxml=pytest.xml \
          -n auto

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: pytest.xml

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: 'pytest.xml'
        check_name: Test Results - Python ${{ matrix.python-version }}
